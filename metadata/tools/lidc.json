{"tool_name":"lidc","contents":["biotools","bioschemas"],"fetched_metadata":{"biotools":{"id":"LIDC","home":"https://pylidc.github.io/","summary":"Standardized representation of the LIDC annotations using DICOM.\n\nScripts for converting TCIA LIDC-IDRI collection derived data into standard DICOM representation from project-specific XML format.\n\nThis repository contains the script used to convert the TCIA LIDC-IDRI XML representation of nodule annotations and characterizations into the DICOM Segmentation object (for annotations) and DICOM Structured Reporting objects (for nodule characterizations).\n\npylidc is an Object-relational mapping (using SQLAlchemy) for the data provided in the LIDC dataset. This means that the data can be queried in SQL-like fashion, and that the data are also objects that add additional functionality via functions that act on instances of data obtained by querying for particular attributes.","addition_date":"2020-01-09T18:18:29Z","last_update_date":"2020-12-22T10:48:28Z","tool_type":["Command-line tool"]},"bioschemas":{"name":"LIDC","home":"https://bio.tools/LIDC","summary":"Standardized representation of the LIDC annotations using DICOM.\n\nScripts for converting TCIA LIDC-IDRI collection derived data into standard DICOM representation from project-specific XML format.\n\nThis repository contains the script used to convert the TCIA LIDC-IDRI XML representation of nodule annotations and characterizations into the DICOM Segmentation object (for annotations) and DICOM Structured Reporting objects (for nodule characterizations).\n\npylidc is an Object-relational mapping (using SQLAlchemy) for the data provided in the LIDC dataset. This means that the data can be queried in SQL-like fashion, and that the data are also objects that add additional functionality via functions that act on instances of data obtained by querying for particular attributes.","tool_type":"sc:SoftwareApplication"}}}