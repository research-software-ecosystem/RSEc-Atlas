{"tool_name":"pb-net","contents":["biotools","bioschemas"],"fetched_metadata":{"biotools":{"id":"pb-net","home":"https://github.com/miaecle/PB-net","license":"GPL-3.0","summary":"Automatic peak integration by sequential deep learning for multiple reaction monitoring.\n\n PeakBoundaryNet: a sequential neural network for peak boundary detection and peak area integration.\n\nPredictions by sequential and reference-based PB-Nets are respectively stored in test_preds.pkl and test_preds_ref.pkl, as a list of numpy arrays representing peak start/end probabilities (in the same order as input). These predictions can also be generated through run.py, based on the pre-trained models.\n\nThe data used for test is stored in test_input.pkl as a list of peak instances, each instance is a tuple of (X, y, metainfo, sample name & peak name).","addition_date":"2021-01-18T09:12:51Z","last_update_date":"2021-01-23T06:39:11Z"},"bioschemas":{"name":"PB-Net","home":"https://bio.tools/pb-net","license":"GPL-3.0","summary":"Automatic peak integration by sequential deep learning for multiple reaction monitoring.\n\n PeakBoundaryNet: a sequential neural network for peak boundary detection and peak area integration.\n\nPredictions by sequential and reference-based PB-Nets are respectively stored in test_preds.pkl and test_preds_ref.pkl, as a list of numpy arrays representing peak start/end probabilities (in the same order as input). These predictions can also be generated through run.py, based on the pre-trained models.\n\nThe data used for test is stored in test_input.pkl as a list of peak instances, each instance is a tuple of (X, y, metainfo, sample name & peak name).","tool_type":"sc:SoftwareApplication"}}}