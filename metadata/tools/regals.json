{"tool_name":"regals","contents":["biotools","bioschemas"],"fetched_metadata":{"biotools":{"id":"regals","home":"https://github.com/ando-lab/regals","license":"GPL-3.0","summary":"a general method to deconvolve X-ray scattering data from evolving mixtures.\n\nSoftware package for small angle X-ray scattering (SAXS) mixture deconvolution by REGularized Alternating Least Squares. It has been applied to datasets from chromatography-coupled SAXS, time-resolved SAXS, and equilibrium titrations. See our paper (Meisburger, Xu, & Ando, 2020) for details.\n\nmatlab/ - MATLAB implementation of the REGALS library.\n\nThe Python implementation was developed in Python 3. The REGALS library requires numpy and scipy. The demos use Jupyter notebooks with h5py for data import and matplotlib for plotting. The code has been tested with the following versions:.","addition_date":"2021-01-18T12:24:44Z","last_update_date":"2021-02-06T12:02:50Z"},"bioschemas":{"name":"REGALS","home":"https://bio.tools/regals","license":"GPL-3.0","summary":"a general method to deconvolve X-ray scattering data from evolving mixtures.\n\nSoftware package for small angle X-ray scattering (SAXS) mixture deconvolution by REGularized Alternating Least Squares. It has been applied to datasets from chromatography-coupled SAXS, time-resolved SAXS, and equilibrium titrations. See our paper (Meisburger, Xu, & Ando, 2020) for details.\n\nmatlab/ - MATLAB implementation of the REGALS library.\n\nThe Python implementation was developed in Python 3. The REGALS library requires numpy and scipy. The demos use Jupyter notebooks with h5py for data import and matplotlib for plotting. The code has been tested with the following versions:.","tool_type":"sc:SoftwareApplication"}}}