{"tool_name":"pygbe","contents":["biotools","bioschemas"],"fetched_metadata":{"biotools":{"id":"pygbe","home":"http://pygbe.github.io/pygbe/docs/","license":"BSD-3-Clause","summary":"Computational nanoplasmonics in the quasistatic limit for biosensing applications.\n\nPyGBe\u2014pronounced pigb\u0113\u2014is a Python library that applies the boundary integral method for biomolecular electrostatics and nanoparticle plasmonics.\n\nPyGBe achieves both algorithmic and hardware acceleration. The solution algorithm uses a Barnes-Hut treecode to accelerate each iteration of a GMRES solver to O(N logN), for N unknowns. It exploits NVIDIA GPU hardware on the most computationally intensive parts of the code using CUDA kernels in the treecode, interfacing with PyCUDA. Some parts of the code are written in C++, wrapped using SWIG.","addition_date":"2021-01-18T07:03:10Z","last_update_date":"2021-01-30T15:14:13Z"},"bioschemas":{"name":"PyGBe","home":"https://bio.tools/pygbe","license":"BSD-3-Clause","summary":"Computational nanoplasmonics in the quasistatic limit for biosensing applications.\n\nPyGBe\u2014pronounced pigb\u0113\u2014is a Python library that applies the boundary integral method for biomolecular electrostatics and nanoparticle plasmonics.\n\nPyGBe achieves both algorithmic and hardware acceleration. The solution algorithm uses a Barnes-Hut treecode to accelerate each iteration of a GMRES solver to O(N logN), for N unknowns. It exploits NVIDIA GPU hardware on the most computationally intensive parts of the code using CUDA kernels in the treecode, interfacing with PyCUDA. Some parts of the code are written in C++, wrapped using SWIG.","tool_type":"sc:SoftwareApplication"}}}